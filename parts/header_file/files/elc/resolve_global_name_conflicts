//resolve_global_name_conflicts
//at namespace ::
/*@
未完成的elc解释器include文件
由steve02081504与Alex0125设计、编写
转载时请在不对此文件做任何修改的同时注明出处
项目地址：https://github.com/ELC-lang/ELC
*/
/*
			   ,??????????????????????????
			   ????????????????????????????
			  ?????????????????????????????+
			  ?????+++++++++++++++++++++++++
			 ?????+++++++++++++++++++++++++
			??????++++++++++++++++++++++++
			?????++
		   ?????+++
		  ??????+++IIIIIIIIIIIIIIIIII
		  ?????+++++IIIIIIIIIIIIIIIIII
		 ?????++++++++++++++++++++++++
		??????+++++++++++++++++++++++:
		?????++
	   ?????+++
	  ??????++
	  ??????????????????????????????II
	 ??????????????????????????????IIII
	,?????????????????????????????IIIII+
	 =???++++++++++++++++++++++++++III?
	   ?++++++++++++++++++++++++++++I+
*/
#include "../../../_share/pre_checks.hpp"
#if !defined(ELC_RESOLVE_GLOBAL_NAME_CONFLICTS)
	#define ELC_RESOLVE_GLOBAL_NAME_CONFLICTS
	#if defined(ELC_RANDOM)
		//make sure std::rand defined
		#include <cstdlib>
		namespace elc::defs{
			template<class T>
			constexpr auto&the_rand=rand<T>;
		}
		namespace elc{
			using defs::the_rand;
		}
		namespace std{
			constexpr auto&the_rand=rand;
		}
		#define rand the_rand
	#endif
	
	#if defined(_MSC_VER)
		namespace elc::defs{
			template<class T>
			constexpr auto&the_type_info=type_info<T>;
			template<float_type T>requires(has_epsilon<T>)
			[[nodiscard]]force_inline constexpr T the_sqrt(const T&v){return sqrt(v);}
			template<integer_type T>[[nodiscard]]force_inline constexpr auto the_sqrt(const T&v){return sqrt(v);}
		}
		namespace elc{
			using defs::the_type_info;
		}
		namespace std{
			typedef type_info the_type_info;
			[[nodiscard]]float the_sqrt(const float&v){return sqrtf(v);}
			[[nodiscard]]double the_sqrt(const double&v){return sqrt(v);}
			[[nodiscard]]long double the_sqrt(const long double&v){return sqrtl(v);}
		}
		#define type_info the_type_info
		#define sqrt the_sqrt
	#endif
	#if defined(_INC_MATH)//float_t
		namespace elc{
			typedef float_t the_float_t;
		}
		namespace std{
			typedef float_t the_float_t;
		}
		#define float_t the_float_t
	#endif
#endif

//file_end

