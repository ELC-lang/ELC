//overhead.hpp
//at namespace elc::APIs::alloc
/*
未完成的elc解释器base文件
由steve02081504与Alex0125设计、编写
转载时请在不对此文件做任何修改的同时注明出处
项目地址：https://github.com/ELC-lang/ELC
*/
/*
			   ,??????????????????????????
			   ????????????????????????????
			  ?????????????????????????????+
			  ?????+++++++++++++++++++++++++
			 ?????+++++++++++++++++++++++++
			??????++++++++++++++++++++++++
			?????++
		   ?????+++
		  ??????+++IIIIIIIIIIIIIIIIII
		  ?????+++++IIIIIIIIIIIIIIIIII
		 ?????++++++++++++++++++++++++
		??????+++++++++++++++++++++++:
		?????++
	   ?????+++
	  ??????++
	  ??????????????????????????????II
	 ??????????????????????????????IIII
	,?????????????????????????????IIIII+
	 =???++++++++++++++++++++++++++III?
	   ?++++++++++++++++++++++++++++I+
*/
namespace overhead_n{
	using namespace ::elc::defs;
	constexpr size_t overhead_get_align(size_t align)noexcept{
		return max(align,alignof(size_t));//保证最高对齐需求
	}
	constexpr size_t overhead_get_offset_value(size_t align)noexcept{
		align=overhead_get_align(align);
		return ceil_div(sizeof(size_t),align)*align;//等同于sizeof(size_t)-sizeof(size_t)%align+(sizeof(size_t)%align?align:0)
		//暨，偏移量既要大于sizeof(size_t)以装下overhead，又要是align的整数倍以保证T实例的对齐被满足
	}
	constexpr size_t correct_size(size_t size,size_t align)noexcept{
		return size+overhead_get_offset_value(align);
	}
	constexpr size_t correct_align(size_t align)noexcept{
		return overhead_get_align(align);
	}
	constexpr inline pointer correct_pointer(pointer a,size_t align)noexcept{
		return apply_off_set(a,overhead_get_offset_value(align));
	}
	constexpr inline pointer recorrect_pointer(pointer a,size_t align)noexcept{
		return unapply_off_set(a,overhead_get_offset_value(align));
	}
	constexpr inline const_pointer recorrect_pointer(const_pointer a, size_t align)noexcept{
		return unapply_off_set(a,overhead_get_offset_value(align));
	}
	inline void set_overhead(pointer a,size_t size)noexcept{
		*reinterpret_cast<size_t*>(a)=size;
	}
	inline size_t get_overhead(const_pointer a)noexcept{
		return*reinterpret_cast<const size_t*>(a);
	}
}

//file_end

